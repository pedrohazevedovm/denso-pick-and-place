from abc import ABC, abstractmethod

from rria_api_denso import RobotCartesianCommand, RobotJointCommand


class AbstractRobot(ABC):
    def __init__(self, workspace_name, control_name, options): ...

    @abstractmethod
    def is_connected(self) -> bool: ...

    @abstractmethod
    def motor_enabled(self) -> bool: ...

    @abstractmethod
    def connect(self) -> bool: ...

    @abstractmethod
    def disconnect(self) -> bool: ...

    @abstractmethod
    def motor_on(self) -> bool: ...

    @abstractmethod
    def motor_off(self) -> bool: ...

    @abstractmethod
    def move_joints(self, command: RobotJointCommand) -> bool: ...

    @abstractmethod
    def move_cartesian(self, command: RobotCartesianCommand) -> bool: ...

    @abstractmethod
    def get_joints_pose(self) -> RobotJointCommand | None: ...

    @abstractmethod
    def get_cartesian_pose(self) -> RobotCartesianCommand | None: ...

    @abstractmethod
    def set_arm_speed(self, speed, accel, decel) -> bool: ...

    @abstractmethod
    def get_current_arm_speed(self) -> tuple | None: ...

    @abstractmethod
    def emergency_stop(self) -> bool: ...

    @abstractmethod
    def clear_faults(self) -> bool: ...

    @abstractmethod
    def get_current_error(self): ...

    @abstractmethod
    def get_current_fig(self) -> int | None: ...

    @abstractmethod
    def is_out_of_range(self, robot_command) -> bool | None: ...

    @abstractmethod
    def joint_to_cartesian(self, command: RobotJointCommand) -> RobotCartesianCommand | None: ...

    @abstractmethod
    def cartesian_to_joint(self, command: RobotCartesianCommand) -> RobotJointCommand | None: ...

    @abstractmethod
    def move_tool_z(self, z_step: float) -> bool: ...

    @abstractmethod
    def calculate_dist_to(self, position): ...

    @abstractmethod
    def move_gripper_to(self, value): ...

    @abstractmethod
    def open_gripper_full(self): ...

    @abstractmethod
    def close_gripper_full(self): ...

    @abstractmethod
    def move_by_variable(self, cao_type, number): ...

    @abstractmethod
    def gripper_status(self): ...

    @abstractmethod
    def current_gripper_angle(self): ...

    @abstractmethod
    def connect_gripper(self): ...

    @abstractmethod
    def disconnect_gripper(self): ...

    @abstractmethod
    def gripper_connected(self): ...

    @abstractmethod
    def gripper_min_angle(self): ...

    @abstractmethod
    def gripper_max_angle(self): ...
